[{"title":"MutedPlayers","type":0,"sectionRef":"#","url":"api/MutedPlayers","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MutedPlayers","url":"api/MutedPlayers#functions","content":" "},{"title":"New​","type":1,"pageTitle":"MutedPlayers","url":"api/MutedPlayers#New","content":"&lt;/&gt; MutedPlayers.New( Target: Player -- Player which the MutedPlayer object is associated with ) → MutedPlayer Creates a new MutedPlayer object associated with the specific player  "},{"title":"Mute​","type":1,"pageTitle":"MutedPlayers","url":"api/MutedPlayers#Mute","content":"&lt;/&gt; MutedPlayers:Mute() → () Mutes player. This is handled by the client. caution No manual server-side checks are being performed for the muted player currently when they chat, although this may change in future releases of Kura.  "},{"title":"Unmute​","type":1,"pageTitle":"MutedPlayers","url":"api/MutedPlayers#Unmute","content":"&lt;/&gt; MutedPlayers:Unmute() → () Unmutes player. This is handled by the client.  "},{"title":"Destroy​","type":1,"pageTitle":"MutedPlayers","url":"api/MutedPlayers#Destroy","content":"&lt;/&gt; MutedPlayers:Destroy() → () Destroys object. "},{"title":"LocatorsClient","type":0,"sectionRef":"#","url":"api/LocatorsClient","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"LocatorsClient","url":"api/LocatorsClient#functions","content":" "},{"title":"New​","type":1,"pageTitle":"LocatorsClient","url":"api/LocatorsClient#New","content":"&lt;/&gt; LocatorsClient.New() → LocatorClient Creates LocatorClient object. No paramaters are passed as it is associated with the game rather than a specific player.  "},{"title":"ShowLocator​","type":1,"pageTitle":"LocatorsClient","url":"api/LocatorsClient#ShowLocator","content":"&lt;/&gt; LocatorsClient:ShowLocator( player: Player -- Player which the Locator is associated with. ) → () Shows locator of a specific player.  "},{"title":"HideLocator​","type":1,"pageTitle":"LocatorsClient","url":"api/LocatorsClient#HideLocator","content":"&lt;/&gt; LocatorsClient:HideLocator( player: Player -- Player which the Locator is associated with. ) → () Hides locator of a specific player.  "},{"title":"GetPlayerLocatorStatus​","type":1,"pageTitle":"LocatorsClient","url":"api/LocatorsClient#GetPlayerLocatorStatus","content":"&lt;/&gt; LocatorsClient:GetPlayerLocatorStatus( player: Player -- Player which the Locator is associated with. ) → () Gets if locator of a specific player is enabled. "},{"title":"LocatorsServer","type":0,"sectionRef":"#","url":"api/LocatorsServer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"LocatorsServer","url":"api/LocatorsServer#functions","content":" "},{"title":"New​","type":1,"pageTitle":"LocatorsServer","url":"api/LocatorsServer#New","content":"&lt;/&gt; LocatorsServer.New( Target: Player -- Player which the Locator object is associated with ) → LocatorServer Creates a new LocatorServer object which stores data  "},{"title":"ShowLocator​","type":1,"pageTitle":"LocatorsServer","url":"api/LocatorsServer#ShowLocator","content":"&lt;/&gt; LocatorsServer:ShowLocator( isEducatorRequesting: boolean,-- Unused educator: Player ,-- Educator from Explorer Kura isEducatorRequestingSelf: boolean-- States if it is the Educator which is requesting the action. This is to prevent the remote event firing twice at the same player. ) → () Shows locator of a specific LocatorServer  "},{"title":"HideLocator​","type":1,"pageTitle":"LocatorsServer","url":"api/LocatorsServer#HideLocator","content":"&lt;/&gt; LocatorsServer:HideLocator( isEducatorRequesting: boolean,-- Unused educator: Player ,-- Educator from Explorer Kura isEducatorRequestingSelf: boolean-- States if it is the Educator which is requesting the action. This is to prevent the remote event firing twice at the same player. ) → () Shows locator of a specific LocatorServer  "},{"title":"Destroy​","type":1,"pageTitle":"LocatorsServer","url":"api/LocatorsServer#Destroy","content":"&lt;/&gt; LocatorsServer:Destroy() → () Destroys object. "},{"title":"TeleportTargets","type":0,"sectionRef":"#","url":"api/TeleportTargets","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TeleportTargets","url":"api/TeleportTargets#functions","content":" "},{"title":"New​","type":1,"pageTitle":"TeleportTargets","url":"api/TeleportTargets#New","content":"&lt;/&gt; TeleportTargets.New( Target: Player -- Player who the TeleportTarget is associated with. ) → TeleportTarget Creates a TeleportTarget object.  "},{"title":"TeleportTo​","type":1,"pageTitle":"TeleportTargets","url":"api/TeleportTargets#TeleportTo","content":"&lt;/&gt; TeleportTargets:TeleportTo( TeleportTarget: TeleportTarget | nil-- Player who the TeleportTarget is associated with. ) → () Teleports the Target of a TeleportTarget to another Target of a TeleportTarget. If no parameter is passed, the target is the spawnpoint of the character.  "},{"title":"Destroy​","type":1,"pageTitle":"TeleportTargets","url":"api/TeleportTargets#Destroy","content":"&lt;/&gt; TeleportTargets:Destroy() → () Destroys object. "},{"title":"QuickAction","type":0,"sectionRef":"#","url":"api/QuickAction","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#properties","content":" "},{"title":"FriendlyName​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#FriendlyName","content":"&lt;/&gt; QuickAction.FriendlyName: string | { true: string, false: string } FriendlyName can either be a fixed string or can vary depending on state, where a table with boolean keys and string values is used.  "},{"title":"DefaultState​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#DefaultState","content":"&lt;/&gt; QuickAction.DefaultState: boolean Specifies the default state which will be passed on to the button in the Quick Action interface. caution If not specified, the DefaultState will be set to false.  "},{"title":"Image​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#Image","content":"&lt;/&gt; QuickAction.Image: Content Add an image to the button. info If not specified, a default specified in ExplorerKuraServer(/init.server.lua) is used instead with a warning. "},{"title":"Functions​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#functions","content":" "},{"title":"ClientFunction​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#ClientFunction","content":"&lt;/&gt; QuickAction.ClientFunction( onState:: boolean-- Passes on the state of the button from the Quick Action interface. ) → ( OnStateResult: boolean,-- The new resultant state which will be passed on to the interface to be displayed. FireServer: any-- The argument which will be passed onto the server after this function finishes via KuraRE. If it is nil, KuraRE does not fire. ) The ClientFunction is the function that is passed onto the client which is run when the button on the Quick Actions section is activated. danger Remember that the onStateResult should be opposite of onState if you want a simple boolean button. Otherwise, the button will get stuck in one state.  "},{"title":"ServerEvent​","type":1,"pageTitle":"QuickAction","url":"api/QuickAction#ServerEvent","content":"&lt;/&gt; QuickAction.ServerEvent( Player:: Player ,-- Player who initiated the ClientFunction. This is sanity-checked as the Educator. ExplorerArgs: ={ TeleportTargets={[Player ]: TeleportTarget}, MutedPlayers={[Player ]: MutedPlayer}, Locators={[Player ]: LocatorServer}, },-- Arguments passed on from ExplorerKuraServer. If you are not using QuickActions, use the ExplorerGetters folder. ClientArgs:: any-- Arguments passed on by the user in the ClientFunction. ) → () The ServerEvent is the function that the server runs if KuraRE is fired in ClientFunction by providing a return value that is not nil. "}]